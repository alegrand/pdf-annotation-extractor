#! /usr/bin/env python3
"""Program to extract, strip, or insert annotations in PDF files"""

import argparse
import os
import sys
from typing import Any, Iterable, Literal, List
from pypdf import PdfReader, PdfWriter
from pypdf.annotations import MarkupAnnotation
# from pypdf.annotations import Highlight
from pypdf.generic import (
    ArrayObject, FloatObject, NumberObject, NameObject, TextStringObject, RectangleObject
)

AnnotationListType = List[Literal[
                                 '/Text', '/Link', '/FreeText',
                                 '/Line', '/Square', '/Circle', '/Polygon', '/PolyLine',
                                 '/Highlight', '/Underline', '/Squiggly', '/StrikeOut', '/Caret',
                                 '/Stamp', '/Ink', '/Popup', '/FileAttachment', '/Sound', '/Movie',
                                 '/Screen', '/Widget', '/PrinterMark', '/TrapNet', '/Watermark',
                                 '/3D', '/Redact', '/Projection', '/RichMedia']]

annotations_to_remove : AnnotationListType = [
                 '/Text',
                 '/FreeText', '/Line',
                 '/Square', '/Circle',
                 '/Polygon', '/PolyLine',
                 '/Highlight', '/Underline',
                 '/Squiggly', '/StrikeOut',
                 '/Caret', '/Stamp', '/Ink',
                 '/Popup', '/FileAttachment',
                 '/Sound', '/Movie',
                 '/Screen', '/Widget',
                 '/PrinterMark', '/TrapNet',
                 '/Watermark', '/3D',
                 '/Redact', '/Projection',
                 '/RichMedia' ]

def eprint(*args: Any, **kwargs: Any) -> None: # For verbose messages
    if main_args.verbose:
        print(*args, file=sys.stderr, **kwargs)

def testing_copy(input_file: str, output_file: str) -> None:
    eprint("## Testing a plain copy with PyPDF")
    writer = PdfWriter(clone_from=input_file)
    with open(output_file, "wb") as fp:
        writer.write(fp)

def strip_annotations(input_file: str, output_file: str) -> None:
    eprint("## Stripping annotations (except Links)")
    writer = PdfWriter(clone_from=input_file)
    writer.remove_annotations(annotations_to_remove)
    with open(output_file, "wb") as fp:
        writer.write(fp)

def extract_annotations(input_file: str, output_file: str) -> None:
    eprint("## Extracting annotations")
    reader = PdfReader(input_file)
    pages = reader.pages
    annotation_list : List[List[Any]] = []

    for pagenum, page in enumerate(pages):
        eprint("==== Page", pagenum, " ====")

        # Save useful annotations
        annotation_list.append([])
        if "/Annots" in page:
            for annot in page["/Annots"]:
                obj = annot.get_object()
                if obj["/Subtype"] in annotations_to_remove:
                    # breakpoint()
                    annotation_list[pagenum].append(obj)

    with open(output_file, "w", encoding='utf-8') as json_annotations:
        json_annotations.write("[\n")
        for p in annotation_list:
            # breakpoint()
            json_annotations.write("   [")
            for a in p:
                # Remove reference to page objects, they would not
                # make sense anymore once dumped in JSON
                if '/P' in a:
                    del a['/P']
                if '/AP' in a:
                    del a['/AP']
                json_annotations.write("      " + repr(a) + ",\n")
            json_annotations.write("],\n")
        json_annotations.write("]")


def insert_annotations(input_file: str, output_file: str, annotations: str) -> None:
    eprint("## Inserting annotations")
    writer = PdfWriter(clone_from=input_file)
    with open(annotations, encoding='utf-8') as f:
        annotation_list = eval(f.read())

    for pagenum, annotations_in_page in enumerate(annotation_list):
        # breakpoint()
        for a in annotations_in_page:
            annotation = MarkupAnnotation()
            writer.add_annotation(page_number=pagenum, annotation=annotation)
            for k, v in a.items():
                if v == '':
                    continue
                if k == '/Rect':
                    annotation[NameObject(k)] = RectangleObject(v)
                    continue
                if k in ['/Subtype', '/Type', '/IT']: # list obtained
                                                      # from reading
                                                      # _markup_annotations.py
                    annotation[NameObject(k)] = NameObject(v)
                    continue
                if isinstance(v, str):
                    annotation[NameObject(k)] = TextStringObject(v)
                elif isinstance(v, int):
                    annotation[NameObject(k)] = NumberObject(v)
                elif isinstance(v, float):
                    annotation[NameObject(k)] = FloatObject(v)
                elif isinstance(v, list):
                    annotation[NameObject(k)] = ArrayObject([FloatObject(x) for x in v])
                else:
                    print("Unhandled (yet) type", type(v), file=sys.stderr)

    with open(output_file, "wb") as fp:
        writer.write(fp)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='pdf_annotation_extractor',
                    description='''This script allows to:
  * Extract annotations from a PDF:
    pdf_annotation_extractor extract doc_annotated.pdf annotations.json
  * Discard annotations from a PDF:
    pdf_annotation_extractor strip   doc_annotated.pdf doc_stripped.pdf
  * Insert  annotations into a PDF:
    pdf_annotation_extractor insert -a annotations.json doc_stripped.pdf doc_annotated.pdf''',
                                     formatter_class=argparse.RawTextHelpFormatter
                    )
    parser.add_argument('action',
                        choices=['extract','strip','insert'], help='Action') # positional argument
    parser.add_argument('input', help='PDF Input file')                  # positional argument
    parser.add_argument('output', help='PDF|JSON Output file')           # positional argument
    parser.add_argument('-a', '--annotations', help='Input annotation file')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help="Display more information on what's happening") # on/off flag
    main_args = parser.parse_args()

    if main_args.action == 'extract':
        extract_annotations(input_file=main_args.input, output_file=main_args.output)
    elif main_args.action == 'strip':
        strip_annotations(input_file=main_args.input, output_file=main_args.output)
    else:
        if main_args.annotations is None or not os.path.exists(main_args.annotations):
            eprint("The 'insert' action requires a valid JSON annotation file")
            parser.print_help()
            sys.exit(0)
        insert_annotations(input_file=main_args.input,
                           output_file=main_args.output,
                           annotations=main_args.annotations)
