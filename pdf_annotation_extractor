#! /usr/bin/env python3
import argparse
import os, sys
from pypdf import PdfReader, PdfWriter
from pypdf.annotations import *
# from pypdf.annotations import Highlight
from pypdf.generic import ArrayObject, FloatObject, NumberObject, NameObject, TextStringObject, RectangleObject

filename_pdf_input = "/tmp/test.pdf"
filename_pdf_output_stripped = "/tmp/test_stripped.pdf"
filename_pdf_output_reannotated = "/tmp/test_reannotated.pdf"
filename_pdf_output_copy = "/tmp/test_copy.pdf"
filename_json_annotations = "/tmp/annotations.json"

annotations_to_remove = ['/Text', '/FreeText', '/Line', '/Square', '/Circle', '/Polygon', '/PolyLine', '/Highlight', '/Underline', '/Squiggly', '/StrikeOut', '/Caret', '/Stamp', '/Ink', '/Popup', '/FileAttachment', '/Sound', '/Movie', '/Screen', '/Widget', '/PrinterMark', '/TrapNet', '/Watermark', '/3D', '/Redact', '/Projection', '/RichMedia']

def eprint(*args, **kwargs): # For verbose messages
    if(main_args.verbose):
        print(*args, file=sys.stderr, **kwargs)

def testing_copy(input=filename_pdf_input, output=filename_pdf_output_copy):
    eprint("## Testing a plain copy with PyPDF")
    writer = PdfWriter(clone_from=input)
    with open(output, "wb") as fp:
        writer.write(fp)
        fp.close()

def strip_annotations(input=filename_pdf_input, output=filename_pdf_output_stripped):
    eprint("## Stripping annotations (except Links)")
    writer = PdfWriter(clone_from=input)
    writer.remove_annotations(annotations_to_remove)
    with open(output, "wb") as fp:
        writer.write(fp)
        fp.close()

def extract_annotations(input=filename_pdf_input, output=filename_json_annotations):
    eprint("## Extracting annotations")
    reader = PdfReader(filename_pdf_input)
    pages = reader.pages
    annotation_list = [];

    for pagenum in range(pages.length_function()):
        eprint("==== Page", pagenum, " ====")
        page=pages[pagenum]

        # Save useful annotations
        annotation_list.append([])
        if "/Annots" in page:
            for annot in page["/Annots"]:
                obj = annot.get_object()
                if obj["/Subtype"] in annotations_to_remove:
                    # breakpoint()
                    annotation_list[pagenum].append(obj)

    with open(filename_json_annotations , "w" ) as json_annotations:
        json_annotations.write("[\n");
        for p in annotation_list:
            # breakpoint()
            json_annotations.write("   [")
            for a in p:
                # Remove reference to page objects, they would not make sense anymore once dumped in JSON
                if '/P' in a:
                    del a['/P']
                if '/AP' in a:
                    del a['/AP']
                json_annotations.write("      " + repr(a) + ",\n")
            json_annotations.write("],\n")
        json_annotations.write("]");
        json_annotations.close()


def insert_annotations(input=filename_json_annotations, output=filename_pdf_output_stripped, annotations=filename_json_annotations):
    eprint("## Inserting annotations")
    writer = PdfWriter(clone_from=filename_pdf_output_stripped)
    with open(annotations) as f:
        annotation_list = eval(f.read())
        f.close()

    for pagenum in range(len(annotation_list)):
        # breakpoint()
        for a in annotation_list[pagenum]:
            annotation = MarkupAnnotation()
            writer.add_annotation(page_number=pagenum, annotation=annotation)
            for k, v in a.items():
                if v == '':
                    continue
                if k == '/Rect':
                    annotation[NameObject(k)] = RectangleObject(v)
                    continue
                if k in ['/Subtype', '/Type', '/IT']: # list obtained from reading _markup_annotations.py
                    annotation[NameObject(k)] = NameObject(v)
                    continue
                if type(v) == str:
                    annotation[NameObject(k)] = TextStringObject(v)
                elif type(v) == int:
                    annotation[NameObject(k)] = NumberObject(v)
                elif type(v) == float:
                    annotation[NameObject(k)] = FloatObject(v)
                elif type(v) == list:
                    annotation[NameObject(k)] = ArrayObject([FloatObject(x) for x in v])
                else:
                    print("Unhandled (yet) type", type(v), file=sys.stderr)

    with open(filename_pdf_output_reannotated, "wb") as fp:
        breakpoint
        writer.write(fp)
        fp.close()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='pdf_annotation_extractor',
                    description='''This script allows to:
  * Extract annotations from a PDF: pdf_annotation_extractor extract doc_annotated.pdf annotations.json
  * Discard annotations from a PDF: pdf_annotation_extractor strip   doc_annotated.pdf doc_stripped.pdf
  * Insert  annotations into a PDF: pdf_annotation_extractor insert --annotations=annotations.json doc_stripped.pdf doc_annotated.pdf ''',
                                     formatter_class=argparse.RawTextHelpFormatter
                    )
    parser.add_argument('action', choices=['extract','strip','insert'], help='Action') # positional argument
    parser.add_argument('input', help='PDF Input file')                  # positional argument
    parser.add_argument('output', help='PDF|JSON Output file')           # positional argument
    parser.add_argument('-a', '--annotations', help='Input annotation file')
    parser.add_argument('-v', '--verbose', action='store_true', help="Display more information on what's happening") # on/off flag
    main_args = parser.parse_args()
    
    if main_args.action == 'extract':
        extract_annotations(input=main_args.input, output=main_args.output)
    elif main_args.action == 'strip':
        strip_annotations(input=main_args.input, output=main_args.output)
    else:
        if main_args.annotations == '' or not os.path.exists(main_args.annotations):
            eprint("The 'insert' action requires a valid JSON annotation file")
            parse_main_args.print_help()
            exit(0)
        insert_annotations(input=main_args.input, output=main_args.output, annotations=main_args.annotations)
